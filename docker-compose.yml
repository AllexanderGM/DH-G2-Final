name: ${NAME}

networks:
    app-network:
        driver: bridge

volumes:
    mysql_data:
    minio_data:

services:
    minio:
        container_name: "${NAME}-minio"
        image: quay.io/minio/minio:RELEASE.2023-07-21T21-12-44Z  # Versi칩n fija
        profiles:
            - back
            - front
            - local
        restart: always
        ports:
            - "${MINIO_PORT}:9000"
            - "${MINIO_PORT_WEB}:9001"
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        command: server /data --console-address ":9001"
        volumes:
            - minio_data:/data
        networks:
            - app-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 20s

    mysql:
        container_name: "${NAME}-mysql_db"
        image: mysql:8.0.33  # Versi칩n fija
        profiles:
            - back
            - front
            - local
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: "${DB_PASSWORD}"
            MYSQL_DATABASE: "${DB_NAME}"
            MYSQL_TCP_PORT: ${DB_PORT}
        ports:
            - "${DB_PORT}:${DB_PORT}"
        volumes:
            - mysql_data:/var/lib/mysql
            # A침adir configuraci칩n optimizada
            - ./mysql-conf:/etc/mysql/conf.d
        networks:
            - app-network
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD}"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 20s
        command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

    backend:
        container_name: "${NAME}-backend_spring_boot"
        profiles:
            - back
            - local
        restart: always
        build:
            context: ./backend
            dockerfile: Dockerfile
        env_file:
            - ./backend/.env
        ports:
            - "${PORT_BACK}:${PORT_BACK}"
        depends_on:
            mysql:
                condition: service_healthy
            minio:
                condition: service_started 
        networks:
            - app-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:${PORT_BACK}/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 60s
        deploy:
            resources:
                limits:
                    cpus: '0.50'  # Limitar uso de CPU
                    memory: 512M  # Limitar uso de memoria

    frontend:
        container_name: "${NAME}-frontend_react"
        profiles:
            - front
            - local
        restart: always
        build:
            context: ./frontend
            dockerfile: Dockerfile
        env_file:
            - ./frontend/.env
        ports:
            - "${PORT_FRONT}:80"
        depends_on:
            mysql:
                condition: service_healthy
            minio:
                condition: service_started 
        networks:
            - app-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:80"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 20s
        deploy:
            resources:
                limits:
                    cpus: '0.30'  # Limitar uso de CPU
                    memory: 256M  # Limitar uso de memoria